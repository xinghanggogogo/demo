1.我们首先要添加必要的iptables（转发表）规则：
	将引起来自eth1（广域网接口）的所有出站数据包都有eth1的源IP地址（也就是启用NAT） 
	iptables -t nat -A POSTROUTING -o eth1 -j MASQUERADE  
	把来自eth0（局域网接口）的所有入站HTTP数据包（发往TCP 80）重定向至Squid侦听端口（TCP 3128），而不是直接将其转发到广域网接口。
	iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 3128 
2.安装squid：
	yum install squid
3.我们将改动squid配置，将其变成透明代理系统,将局域网子网（比如10.10.10.0/24）定义为有效的客户端网络。不是来自该局域网子网的任何流量将被拒绝访问：
	# vim /etc/squid/squid.conf  
	visible_hostname proxy.example.tst  
	http_port 3128 transparent  
	## 定义我们的网络## acl our_network src 10.10.10.0/24  
	## 确保我们的网络允许访问## http_access allow our_network  
	## 最后拒绝其他的所有流量## http_access deny all
4.现在我们开启Squid服务，确保它已被添加到启动项：
	# service squid start  
	# chkconfig squid on 
5.鉴于Squid已搭建并运行起来，我们可以测试其功能了，为此只需监测Squid日志。从连接至该局域网的计算机访问任何URL，你应该会在日志中看到类似以下的内容。
	# tailf /var/log/squid/access.log  
	1402987348.816 1048 10.10.10.10 TCP_MISS/302 752  
	GET http://www.google.com/ - DIRECT/173.194.39.178  text/html  
	1402987349.416 445 10.10.10.10 TCP_MISS/302 762  
	GET http://www.google.com.bd/? - DIRECT/173.194.78.94 text/html 
	##P地址为10.10.10.10的机器试图访问google.com，Squid处理了这个请求

另：
-----------------
squid以一种自上而下的方式来解析文件。
自上而下地解析规则，直到发现匹配为止。
一旦发现匹配，该规则就被执行；其下面的其他任何规则将被忽视。所以，添加过滤规则的最佳实践就是，按下列顺序指定规则。
explicit allow	#explicit（明确）
explicit deny
allow entire LAN      #entire(全部)
deny all
-----------------
一旦Squid配置经过改动，Squid服务就需要重启。
重启服务可能需要一段时间，有时要几分钟，长短取决于活动连接的数量。
在这个期间，局域网用户无法访问互联网。想避免这种服务中断，我们可以使用下面这个命令，而不是使用“service squid restart”。
# squid -k reconfigure 
该命令将允许Squid使用更新后的参数来运行，而不需要重启本身。
-----------------
一个例子要搭建这样的Squid：禁止拥有IP地址10.10.10.24的主机和IP地址10.10.10.25的主机访问互联网。
为此，我们创建了一个文本文件“denied-ip-file”，里面含有所有被拒绝访问的主机的IP地址，然后将该文件添加到Squid配置中。
# vim /etc/squid/denied-ip-file  
10.10.10.24  
10.10.10.25  
#vim /etc/squid/squid.conf  
#acl denied-ip-list src "/etc/squid/denied-ip-file"  ## 首先我们创建访问控制列表（ACL），隔离被拒绝访问的IP地址
#http_access deny denied-ip-list ## 我们应用ACL，明确拒绝##
#http_access allow our_network  ## 允许局域网
#http_access deny all ## 拒绝所有deny all ## 
现在我们需要重启Squid服务。Squid将不再认可来自这些IP地址的请求。如果我们检查squid日志，就会发现来自这些主机的请求处于“TCP_DENIED”状态
-----------------
过滤黑名单中的网站
这个方法将只适用于HTTP。假设我们想阻止badsite.com和denysite.com，就可以将这两个网址添加到文件，并且将引用添加到squid.conf。
# vim /etc/squid/badsite-file  
badsite  
denysite  
# vim /etc/squid/squid.conf  
## ACL定义##acl badsite-list url_regex "/etc/squid/badsite-file"  
## ACL 应用## http_access deny badsite-list  
http_access deny denied-ip-list ## 之前设置，但这里不起作用## http_access allow our_network  
http_access deny all 
请注意：我们使用了ACL类型“url_regex”，这将与所请求的URL中的“badsite”和“denysite”这两个词相匹配。
也就是说，凡是在URL中含有“badsite”或“denysite”（比如badsite.org、newdenysite.com或otherbadsite.net）的请求一律被阻止
------------------
我们将创建一个访问列表，阻止IP地址为10.10.10.200的客户端和IP地址为10.10.10.201的客户端访问custom-block-site.com。
其他任何客户端都能够访问该网站。
为此，我们将首先创建一个访问列表以隔离这两个IP地址，然后创建另一个访问列表以隔离所需的网站。
最后，我们将同时使用这两个访问列表，以满足要求。
# vim /etc/squid/custom-denied-list-file  
10.10.10.200  
10.10.10.201  
# vim /etc/squid/custom-block-website-file  
custom-block-site  
# vim /etc/squid/squid.conf  
acl custom-denied-list src "/etc/squid/custom-denied-list-file"  
acl custom-block-site url_regex "/etc/squid/custom-block-website-file"  
## ACL应用 ## http_access
 deny custom-denied-list custom-block-site  
http_access deny badsite-list ## 之前设置，但这里不起作用
## http_access deny denied-ip-list ## 之前设置，但这里不起作用
## http_access allow our_network  
http_access deny all  
# squid -k reconfigure 

http://219.138.29.37/hdl1a.douyucdn.cn/live/321358rsCw2RljMK_550.flv?wsAuth=fb2dc3f841522382b936402e4c432788&token=web-douyu-0-321358-87b1ffaf90903fdc64cd233b2222b8f9&logo=0&expire=0&did=F63FAE164B710A9E83977467710704E9&ver=2016110111&wshc_tag=0&wsts_tag=58195586&wsid_tag=1ca7dda&wsiphost=ipdbm

http://219.138.29.37/hdl1a.douyucdn.cn/live/321358rsCw2RljMK_550.flv?wsAuth=fb2dc3f841522382b936402e4c432788&token=web-douyu-0-321358-87b1ffaf90903fdc64cd233b2222b8f9&logo=0&expire=0&did=F63FAE164B710A9E83977467710704E9&ver=2016110111&wshc_tag=0&wsts_tag=58195586&wsid_tag=1ca7dda&wsiphost=ipdbm